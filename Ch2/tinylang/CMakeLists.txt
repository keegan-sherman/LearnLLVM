cmake_minimum_required(VERSION 3.13.4)

# if true then the project should be built standalone
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    project(Tinylang) # name the project

    # find and add LLVM dir to cmake module path
    find_package(LLVM REQUIRED HINTS "${LLVM_CMAKE_PATH}")
    list(APPEND CMAKE_MODULE_PATH ${LLVM_DIR})

    # add macros used by LLVM and config build based on provided options
    include(AddLLVM)
    include(HandleLLVMOptions)

    # add the path of header files to the include search path
    include_directories("${LLVM_BINARY_DIR}/include" "${LLVM_INCLUDE_DIR}")
    # add path of LLVM libs for linker
    link_directories("${LLVM_LIBRARY_DIR}")

    # set flag saying project was built standalone
    set(TINYLANG_BUILT_STANDALONE 1)
endif()

# common setup, add modules dir to cmake modules path so that we can later add our own modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

# make sure build is outside of source dir
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE)
    message(FATAL_ERROR "In-source builds are not allowed.")
endif()

# set a version number to be written a file generated by configure_file
set(TINYLANG_VERSION_STRING "0.1")
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/include/tinylang/Basic/Version.inc.in
    ${CMAKE_CURRENT_BINARY_DIR}/include/tinylang/Basic/Version.inc
)

# include the AddTinylang cmake module which contains so helper functionality
include(AddTinylang)

# add our own include dirs to the beginning of the search path
include_directories(BEFORE
    ${CMAKE_CURRENT_BINARY_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# add subdirs for cmake to look in to find other CMakeLists.txt files
add_subdirectory(lib)
add_subdirectory(tools)
